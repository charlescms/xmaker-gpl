{
   Componente.: XDBEdit.pas
   Copyright..: Modular Software - http://www.xmaker.com.br
   Data.......: 28/08/2006
}
unit XDBEdit;

interface

{$I XMaker.inc}

uses
  Windows, Messages, SysUtils, {$IFDEF DELPHI5}{$ELSE}Variants,{$ENDIF} Classes, Graphics, Controls,
  Forms, Dialogs, StdCtrls, Mask, db, dbctrls, buttons, Extctrls, Menus;

const
  scF8 = vk_f8;

type
  TXDBEdit = class(TMaskEdit)
  private
    FEditMask: string;
    FFocused: Boolean;
    FAlignment: TAlignment;
    FButton: TSpeedButton;
    FClickKey: TShortCut;
    FCanvas: TControlCanvas;
    fDataLink : TFieldDataLink;
    FWinBack: TWinControl;
    FGlyph: TBitmap;
    FShowButton: Boolean;
    FEnabledBtn: Boolean;
    FEnabledPesq: Boolean;
    FOnBtnClick: TNotifyEvent;
    FKey: Char;
    function GetDataField : string;
    function GetDataSource : TDataSource;
    procedure SetDataField(const Value : string);
    procedure SetDataSource(Value : TDataSource);
    procedure DataChange(Sender : TObject);
    procedure UpdateData(Sender : TObject);
    procedure CreateButton;
    procedure ButtonClick(Sender: TObject);
    procedure ChangeGlyph(Sender: TObject);
    procedure CheckLimitText;
    procedure SetGlyph(Value: TBitmap);
    procedure SetShowButton(const Value: Boolean);
    procedure SetShowCaret;
    procedure SetButtonSize;
    function GetEnabledBtn: Boolean;
    function GetEnabledPesq: Boolean;
    procedure SetEnabledBtn(Value: Boolean);
    procedure SetEnabledPesq(Value: Boolean);
    procedure SetClientRect;
    procedure SetReadOnly(Value: Boolean);
    function GetReadOnly: Boolean;
    procedure WMPaint(var Msg: TWMPaint); message WM_PAINT;
    procedure WMSize(var Msg: TWMSize); message WM_SIZE;
    procedure WMSetFocus(var Msg: TMessage); message WM_SETFOCUS;
    procedure CMEnter(var Msg: TCMEnter); message CM_ENTER;
    procedure CMExit(var Msg: TCMExit); message CM_EXIT;
    function GetCursorHeight: Integer;
    function GetTextMargins: TPoint;
    procedure SetFocused(Value: Boolean);
    procedure EditingChange(Sender: TObject);
    function IsActive: Boolean;
  protected
    procedure MouseDown(Button : TMouseButton; Shift : TShiftState; X, Y : Integer); override;
    procedure KeyDown(var Key : Word; Shift : TShiftState); override;
    procedure KeyPress(var Key: Char); override;
    procedure Change; override;
    procedure CreateParams(var Params: TCreateParams); override;
    procedure CreateWnd; override;
  public
    constructor Create(AOwner : TComponent); override;
    destructor Destroy; override;
  published
    property DataField : string read GetDataField write SetDataField;
    property DataSource : TDataSource read GetDataSource write SetDataSource;
    property Glyph: TBitmap read FGlyph write SetGlyph;
    property ShowButton: Boolean read FShowButton write SetShowButton default False;
    property EnabledBtn: Boolean read GetEnabledBtn write SetEnabledBtn default False;
    property Pesquisa: Boolean read GetEnabledPesq write SetEnabledPesq default False;
    property OnBtnClick: TNotifyEvent read FOnBtnClick write FOnBtnClick;
    property ClickKey: TShortCut read FClickKey write FClickKey
      default scF8;
    property ReadOnly: Boolean read GetReadOnly write SetReadOnly default False;
  end;

procedure Register;

implementation

{$R *.RES}

const
  IMAGE_RES = 'DBEDIT_';
  IMAGE_PESQ = 'DBEDIT_PESQ';

type
  TEditBtn = class(TSpeedButton)
  private
    FCanvas: TControlCanvas;
  protected
    procedure Paint; override;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  end;

constructor TEditBtn.Create(AOwner: TComponent);
begin
  inherited Create(AOwner);
  //inherited ReadOnly := True;
  FCanvas := TControlCanvas.Create;
  FCanvas.Control := Self;
end;

destructor TEditBtn.Destroy;
begin
  FCanvas.Free;
  inherited Destroy;
end;

procedure TEditBtn.Paint;
var
  R: TRect;
begin
  inherited;
  if FState = bsUp then
    begin
      R := ClientRect;
      Frame3D(FCanvas, R, clBtnHighLight, clWindowFrame, 1);
      Frame3D(FCanvas, R, clBtnFace, clBtnShadow, 1);
    end;
end;

function TXDBEdit.GetDataField : string;
begin
  result := fDataLink.FieldName;
end;

function TXDBEdit.GetDataSource : TDataSource;
begin
  result := fDataLink.DataSource;
end;

procedure TXDBEdit.SetDataField(const Value : string);
begin
  fDataLink.FieldName := Value;
end;

procedure TXDBEdit.SetDataSource(Value : TDataSource);
begin
  fDataLink.DataSource := Value;
end;

procedure TXDBEdit.DataChange(Sender : TObject);
begin
  if (fDataLink.Field = nil) or (FDataLink.Field.asVariant = NULL) then
    Text := ''
  else
    Text := FDataLink.Field.asVariant;
  if Focused and not FDataLink.Editing then
    SelectAll;
end;

procedure TXDBEdit.UpdateData(Sender : TObject);
begin
  FDataLink.Field.asVariant := Text;
end;

procedure TXDBEdit.MouseDown(Button : TMouseButton; Shift : TShiftState; X, Y : Integer);
var
  MyMouseDown : TMouseEvent;
begin
  if not fDataLink.ReadOnly and fDataLink.Editing then
    inherited MouseDown(Button, Shift, X, Y)
  else begin
    MyMouseDown := OnMouseDown;
    if Assigned(MyMouseDown) then MyMouseDown(Self, Button, Shift, X, Y);
  end;
end;

procedure TXDBEdit.KeyDown(var Key : Word; Shift : TShiftState);
var
  MyKeyDown : TKeyEvent;
begin
  if not fDataLink.ReadOnly and fDataLink.Editing then
  begin
    inherited KeyDown(Key, Shift);
    if (FClickKey = ShortCut(Key, Shift)) then begin
      ButtonClick(Self);
      Key := 0;
    end;
  end
  else begin
    MyKeyDown := OnKeyDown;
    if Assigned(MyKeyDown) then MyKeyDown(Self, Key, Shift);
  end;
end;

procedure TXDBEdit.KeyPress(var Key: Char);
var
  Form: TCustomForm;
begin
  if Ord(Key) in [VK_ESCAPE, VK_RETURN]  then
    begin
      Form := GetParentForm(Self);
      if Form <> nil then
        PostMessage(Form.Handle, CN_KEYDOWN, Ord(Key), 1);
    end;
  inherited KeyPress(Key);
  begin
    FKey := Key;
    CheckLimitText;
    Key := FKey;
  end;
end;

procedure TXDBEdit.CheckLimitText;
var
  Margins: TPoint;
  I: Integer;
begin
  begin
    FCanvas.Font.Assign(Font);
    Margins := GetTextMargins;
    I := ClientWidth - FButton.Width - (Margins.X * 2) -
      FCanvas.TextWidth(Text) - 3;
  end;
end;

procedure TXDBEdit.Change;
begin
  FDataLink.Modified;
  inherited Change;
end;

constructor TXDBEdit.Create(AOwner : TComponent);
begin
  inherited Create(AOwner);
  FCanvas := TControlCanvas.Create;
  FCanvas.Control := Self;
  fDataLink := TFieldDataLink.Create;
  fDataLink.OnDataChange := DataChange;
  fDataLink.OnUpdateData := UpdateData;
  fDataLink.OnEditingChange := EditingChange;
  FClickKey := scF8;
  FShowButton := False;
  CreateButton;
end;

destructor TXDBEdit.Destroy;
begin
  FCanvas.Free;
  fDataLink.OnDataChange := nil;
  fDataLink.Free;
  FGlyph.Free;
  FButton.Free;
  FWinBack.Free;
  inherited Destroy;
end;

procedure TXDBEdit.CreateButton;
begin
  FWinBack := TWinControl.Create(Self);
  FWinBack.Parent := Self;
  TEdit(FWinBack).Color := clBtnFace;
  FButton := TEditBtn.Create(Self);
  FButton.Parent := FWinBack;
  FButton.OnClick := ButtonClick;
  FButton.Layout := blGlyphRight;
  FButton.Enabled := FEnabledBtn;
  FGlyph := TBitmap.Create;
  FGlyph.OnChange := ChangeGlyph;
  FGlyph.Handle := LoadBitmap(HInstance, IMAGE_RES);
end;

procedure TXDBEdit.SetGlyph(Value: TBitmap);
begin
  if Value = nil then
    FGlyph.Handle := LoadBitmap(HInstance, IMAGE_RES)
  else
    FGlyph.Assign(Value);
end;

procedure TXDBEdit.ChangeGlyph(Sender: TObject);
var
  NG: Byte;
begin
  FButton.Glyph := FGlyph;
  NG := 1;
  if not FGlyph.Empty then
    if (FGlyph.Width mod FGlyph.Height) = 0 then
      begin
        NG := FGlyph.Width div FGlyph.Height;
        if NG > 4 then
          NG := 1;
      end;
  FButton.NumGlyphs := NG;
end;

procedure TXDBEdit.SetShowButton(const Value: Boolean);
begin
  FShowButton := Value;
  if not FShowButton then
    begin
      FWinBack.SetBounds(0, 0, 0, 0);
      FButton.SetBounds(0, 0, 0, 0);
      SetClientRect;
    end
  else
    begin
      SetButtonSize;
      SetClientRect;
    end;
  Invalidate;
end;

procedure TXDBEdit.SetButtonSize;
begin
  if FShowButton then
    begin
      FWinBack.SetBounds(ClientWidth - ClientHeight - 1, 0,
        ClientHeight + 1, ClientHeight);
      FButton.SetBounds(1, 0, ClientHeight, ClientHeight);
    end
  else
    begin
      FWinBack.SetBounds(0, 0, 0, 0);
      FButton.SetBounds(0, 0, 0, 0);
    end;
end;

procedure TXDBEdit.ButtonClick(Sender: TObject);
begin
  if FDataLink.ReadOnly = False then
    if Assigned(FOnBtnClick) then
      FOnBtnClick(Self);
end;

function TXDBEdit.GetEnabledBtn: Boolean;
begin
  Result := FEnabledBtn;
end;

function TXDBEdit.GetEnabledPesq: Boolean;
begin
  Result := FEnabledPesq;
end;

procedure TXDBEdit.SetEnabledBtn(Value: Boolean);
begin
  FEnabledBtn := Value;
  Invalidate;
end;

procedure TXDBEdit.SetEnabledPesq(Value: Boolean);
begin
  FEnabledPesq := Value;
  if Value then
    FGlyph.Handle := LoadBitmap(HInstance, IMAGE_PESQ);
  Invalidate;
end;

procedure TXDBEdit.SetClientRect;
var
  Rect: TRect;
begin
  SendMessage(Handle, EM_GETRECT, 0, Longint(@Rect));
  Rect.Bottom := ClientHeight + 1;
  Rect.Right := ClientWidth - FButton.Width - 2;
  Rect.Top := 0;
  Rect.Left := 0;
  SendMessage(Handle, EM_SETRECTNP, 0, LongInt(@Rect));
  SendMessage(Handle, EM_GETRECT, 0, LongInt(@Rect));
end;

procedure TXDBEdit.WMPaint(var Msg: TWMPaint);
var
  X: Integer;
  Rect: TRect;
  DC: HDC;
  PS: TPaintStruct;
  S: string;
  Margins: TPoint;
begin
  SetClientRect;
  FButton.Enabled := (csDesigning in ComponentState) or
    ((FDataLink.Field <> nil) and FEnabledBtn);
  if (csPaintCopy in ControlState) and (FDataLink.Field <> nil) then
  begin
    S := FDataLink.Field.DisplayText;
    case CharCase of
      ecUpperCase: S := AnsiUpperCase(S);
      ecLowerCase: S := AnsiLowerCase(S);
    end;
  end
  else
    S := EditText;

  inherited;
end;

procedure TXDBEdit.CMEnter(var Msg: TCMEnter);
begin
  SetFocused(True);
  SelectAll;
  inherited;
  Invalidate;
end;

procedure TXDBEdit.CMExit(var Msg: TCMExit);
begin
  begin
    try
      FDataLink.UpdateRecord;
    except
      SelectAll;
      SetFocus;
      raise;
    end;
    SetFocused(False);
    SetCursor(0);
    DoExit;
  end;
end;

procedure TXDBEdit.WMSize(var Msg: TWMSize);
begin
  inherited;
  SetButtonSize;
  SetClientRect;
end;

procedure TXDBEdit.WMSetFocus(var Msg: TMessage);
begin
  inherited;
  SetShowCaret;
end;

procedure TXDBEdit.SetShowCaret;
begin
  CreateCaret(Handle, 0, 1, GetCursorHeight);
  ShowCaret(Handle);
end;

function TXDBEdit.GetCursorHeight: Integer;
var
  DC: HDC;
  SaveFont: HFont;
  Metrics: TTextMetric;
begin
  DC := GetDC(0);
  try
    SaveFont := SelectObject(DC, Font.Handle);
    GetTextMetrics(DC, Metrics);
    SelectObject(DC, SaveFont);
  finally
    ReleaseDC(0, DC);
  end;
  Result := Metrics.tmHeight;
end;

function TXDBEdit.GetTextMargins: TPoint;
var
  DC: HDC;
  SaveFont: HFont;
  I: Integer;
  SysMetrics, Metrics: TTextMetric;
begin
  if NewStyleControls then
    begin
      if BorderStyle = bsNone then
        I := 0
      else if Ctl3D then
        I := 1
      else
        I := 2;
      Result.X := SendMessage(Handle, EM_GETMARGINS, 0, 0) and $0000FFFF + I;
      Result.Y := I;
    end
  else
    begin
      if BorderStyle = bsNone then
        I := 0
      else
        begin
          DC := GetDC(0);
          GetTextMetrics(DC, SysMetrics);
          SaveFont := SelectObject(DC, Font.Handle);
          GetTextMetrics(DC, Metrics);
          SelectObject(DC, SaveFont);
          ReleaseDC(0, DC);
          I := SysMetrics.tmHeight;
          if I > Metrics.tmHeight then
            I := Metrics.tmHeight;
          I := I div 4;
        end;
      Result.X := I;
      Result.Y := I;
    end;
end;

procedure TXDBEdit.CreateParams(var Params: TCreateParams);
const
  Alignments: array[TAlignment] of DWORD = (ES_LEFT, ES_RIGHT, ES_CENTER);
begin
  inherited CreateParams(Params);
  Params.Style := Params.Style or ES_AUTOHSCROLL or ES_MULTILINE or
    Alignments[FAlignment] or WS_CLIPCHILDREN;
end;

procedure TXDBEdit.CreateWnd;
begin
  inherited CreateWnd;
  SetClientRect;
end;

procedure TXDBEdit.SetFocused(Value: Boolean);
begin
  if FFocused <> Value then
    begin
      FFocused := Value;
      if (FAlignment <> taLeftJustify) and not IsMasked then
        Invalidate;
      FDataLink.Reset;
    end;
end;

function TXDBEdit.GetReadOnly: Boolean;
begin
  Result := FDataLink.ReadOnly;
end;

procedure TXDBEdit.SetReadOnly(Value: Boolean);
begin
  FDataLink.ReadOnly := Value;
end;

procedure TXDBEdit.EditingChange(Sender: TObject);
begin
  inherited ReadOnly := not FDataLink.Editing;
end;

function TXDBEdit.IsActive: Boolean;
var
  DtSrc: TDataSource;
begin
  Result := False;
  DtSrc := GetDataSource;
  if (DtSrc <> nil) and (DtSrc.Dataset <> nil) then
    Result := DtSrc.Dataset.Active
end;

procedure Register;
begin
  RegisterComponents('X-Maker', [TXDBEdit]);
end;

end.
